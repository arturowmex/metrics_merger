/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import java.awt.event.ActionEvent;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.xpath.XPathExpressionException;
import model.Model;
import org.xml.sax.SAXException;
import view.filter.CsvFileExtensionFilter;
import view.filter.XmlFileExtensionFilter;

/**
 *
 * @author Arturo
 */
public class InitialJFrame extends javax.swing.JFrame {

    final private String initialDirectoryPath = "C:\\Users\\Arturo\\Google Drive\\Dissertation\\Datos Proyecto";
    Model model = new Model();
    
    /**
     * Creates new form InitialJFrame
     */
    public InitialJFrame() {
        initComponents();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InitialJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InitialJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InitialJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InitialJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new InitialJFrame().setVisible(true);
        });
    }
    
    private void chooseQualityMetricsFile(MouseEvent evt) {
        
        fileOpenChooser = new JFileChooser(initialDirectoryPath);
        fileOpenChooser.addChoosableFileFilter(new CsvFileExtensionFilter());
        fileOpenChooser.setAcceptAllFileFilterUsed(false);
        int returnVal = fileOpenChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fileOpenChooser.getSelectedFile();
            this.qualityMetricFileTextField.setText(file.getAbsolutePath());
        } else {
            System.out.println("Action cancelled by the user");
        }
    }

    private void chooseTestCoverageFile(MouseEvent evt) {
        
        fileOpenChooser = new JFileChooser(initialDirectoryPath);
        fileOpenChooser.addChoosableFileFilter(new XmlFileExtensionFilter());
        fileOpenChooser.setAcceptAllFileFilterUsed(false);
        int returnVal = fileOpenChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fileOpenChooser.getSelectedFile();
            this.testCoverageMetricFileTextField.setText(file.getAbsolutePath());
        } else {
            System.out.println("Action cancelled by the user");
        }
    }
    
    private void mergeFiles(ActionEvent evt) throws IOException {
        
        mergeMetrics();
        fileSaveChooser = new JFileChooser(initialDirectoryPath);
        fileSaveChooser.addChoosableFileFilter(new CsvFileExtensionFilter());
        fileSaveChooser.setAcceptAllFileFilterUsed(false);
        int returnVal = fileSaveChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fileSaveChooser.getSelectedFile();
            model.saveMetricsCsvFile(file.getAbsolutePath()+".csv");
        } else {
            System.out.println("Action cancelled by the user");
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileOpenChooser = new javax.swing.JFileChooser();
        fileSaveChooser = new javax.swing.JFileChooser();
        titleLabel = new javax.swing.JLabel();
        QualityMetricsPathLabel = new javax.swing.JLabel();
        qualityMetricFileTextField = new javax.swing.JTextField();
        testCoverageLabel = new javax.swing.JLabel();
        testCoverageMetricFileTextField = new javax.swing.JTextField();
        exitButton = new javax.swing.JButton();
        mergeButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        titleLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titleLabel.setText("Merge Test Coverage and Quality Metrics");

        QualityMetricsPathLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        QualityMetricsPathLabel.setText("Quality Metrics File:");

        qualityMetricFileTextField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                qualityMetricFileTextFieldMouseClicked(evt);
            }
        });

        testCoverageLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        testCoverageLabel.setText("Test Coverage File:");

        testCoverageMetricFileTextField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                testCoverageMetricFileTextFieldMouseClicked(evt);
            }
        });

        exitButton.setText("Exit");
        exitButton.setMinimumSize(new java.awt.Dimension(64, 25));
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });

        mergeButton.setText("Merge");
        mergeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mergeButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(titleLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(testCoverageLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(QualityMetricsPathLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 107, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(qualityMetricFileTextField)
                            .addComponent(testCoverageMetricFileTextField)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 324, Short.MAX_VALUE)
                        .addComponent(mergeButton)
                        .addGap(18, 18, 18)
                        .addComponent(exitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(titleLabel)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(QualityMetricsPathLabel)
                    .addComponent(qualityMetricFileTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(testCoverageLabel)
                    .addComponent(testCoverageMetricFileTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(exitButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mergeButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void qualityMetricFileTextFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_qualityMetricFileTextFieldMouseClicked
        chooseQualityMetricsFile(evt);
    }//GEN-LAST:event_qualityMetricFileTextFieldMouseClicked

    private void testCoverageMetricFileTextFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_testCoverageMetricFileTextFieldMouseClicked
        chooseTestCoverageFile(evt);
    }//GEN-LAST:event_testCoverageMetricFileTextFieldMouseClicked

    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitButtonActionPerformed

    private void mergeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mergeButtonActionPerformed
        try {
            mergeFiles(evt);
        } catch (IOException ex) {
            Logger.getLogger(InitialJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_mergeButtonActionPerformed

    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel QualityMetricsPathLabel;
    private javax.swing.JButton exitButton;
    private javax.swing.JFileChooser fileOpenChooser;
    private javax.swing.JFileChooser fileSaveChooser;
    private javax.swing.JButton mergeButton;
    private javax.swing.JTextField qualityMetricFileTextField;
    private javax.swing.JLabel testCoverageLabel;
    private javax.swing.JTextField testCoverageMetricFileTextField;
    private javax.swing.JLabel titleLabel;
    // End of variables declaration//GEN-END:variables

    private void mergeMetrics() {
        try {
            model.mergeMetricsFile(this.qualityMetricFileTextField.getText(), this.testCoverageMetricFileTextField.getText());
        } catch (IOException ex) {
            System.out.println(ex.getMessage());
        } catch (SAXException ex) {
            System.out.println(ex.getMessage());
        } catch (ParserConfigurationException ex) {
            System.out.println(ex.getMessage());
        } catch (XPathExpressionException ex) {
            System.out.println(ex.getMessage());
        }
    }

    

    
}
